##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	# listen 80 default_server;
	# listen [::]:80 default_server;
	#
	listen 443;
	ssl on;
    ssl_certificate /home/ubuntu/key_dir/server.crt;
    ssl_certificate_key /home/ubuntu/key_dir/server.key;
	#
	# ssl_session_timeout 5m;
	# ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; 
    # ssl_prefer_server_ciphers on;
	# ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	#
    server_name 106.52.167.176;
    charset utf-8;
	client_max_body_size 75M;
    location /media  {
        alias /home/ubuntu/myweb/media/;
    }
    location /static {
        alias /home/ubuntu/myweb/static/;
    }
	# SSL configuration
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;
	#
	root /var/www/html;
	#
	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;
	#
	# server_name _;
	#
	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		# try_files $uri $uri/ =404;
		uwsgi_pass  127.0.0.1:8000;
		uwsgi_connect_timeout 30;
		include  /etc/nginx/uwsgi_params;
	}
	access_log /home/ubuntu/logs/nginx/access.log;
    error_log /home/ubuntu/logs/nginx/error.log;
	# max 设置缓存中多容纳的文件描述符数量, 如果被占满, 采用LRU算法将描述符关闭.
	# inactive 设置缓存存活时间, 默认是10s.
	# min_uses 在inactive时间段内, 日志文件少使用几次, 该日志文件描述符记入缓存, 默认是1次.
	# valid: 设置多久对日志文件名进行检查, 看是否发生变化, 默认是60s
	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}
	#
	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}
#
# 将所有 80(http) 请求重定向到 443(https)
server {
	listen 80;
    server_name  106.52.167.176;
	# 永久重定向
    return 301 https://$server_name$request_uri;
}
#
# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
